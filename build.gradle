buildscript {
    ext {
        springBootVersion = '2.1.2.RELEASE'
    }
    repositories {
        maven {
            name "aliyunmaven"
            url "http://maven.aliyun.com/nexus/content/groups/public/"
        }
        maven {
            url "https://repo.spring.io/milestone"
        }

        mavenCentral()
        mavenLocal()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
group = 'com.hht'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
    maven {
        name "aliyunmaven"
        url "http://maven.aliyun.com/nexus/content/groups/public/"
    }
    maven {
        url "https://repo.spring.io/milestone"
    }
    maven {
     url 'http://192.168.34.187:18081/repository/maven-public/'
     }
    mavenCentral()
}


ext {
    springCloudVersion = 'Finchley.SR1'
}
dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-starter-data-redis')
    compile('org.springframework.boot:spring-boot-starter-test')
    compile "org.mybatis.spring.boot:mybatis-spring-boot-starter:1.3.1"
    compile "mysql:mysql-connector-java"
    compile ('com.alibaba:druid:1.0.31'){
    exclude group: 'com.alibaba', module: 'jconsole'
    exclude group: 'com.alibaba', module: 'tools'
    }
    compile "org.springframework:spring-context-support"        
    compile "com.netflix.hystrix:hystrix-core"
    compile "com.netflix.hystrix:hystrix-metrics-event-stream"
    compile "com.netflix.hystrix:hystrix-javanica"
    compile "com.alibaba:fastjson:1.2.46"
    compile "io.springfox:springfox-swagger-ui:2.8.0"
    compile "io.springfox:springfox-swagger2:2.8.0"
    compile "org.apache.commons:commons-lang3:3.6"
	compile "javax.xml.bind:jaxb-api:2.3.0"
	compile "com.sun.xml.bind:jaxb-impl:2.3.0"
	compile "com.sun.xml.bind:jaxb-core:2.3.0"
	compile "javax.activation:activation:1.1.1"    
    
    testCompile "org.springframework.boot:spring-boot-starter-test:${springBootVersion}"
    testCompile group: 'junit', name: 'junit', version: '4.12'
    compile fileTree(dir: 'lib', include: '*.jar')
}


def buildTime = new Date().format("yyyyMMddHHmm")
def cVersion = "${version}"
def pName = "${project.name}"
def serviceName = "wms-core"

bootJar.enabled = true
springBoot {
    mainClassName = 'com.hht.wms.core.WmsCoreApplication'
}
bootJar {
    mainClassName = 'com.hht.wms.core.WmsCoreApplication'
    version = ""
}

task zipJar(dependsOn: ":${pName}:bootRepackage",type: Zip) {
    from "build/libs/${pName}.jar"
    rename { String fileName ->
        fileName.replace("${pName}.jar", "${serviceName}.jar")
    }
    extension = "zip"
    baseName = "${pName}-${cVersion}-${buildTime}"
    destinationDir = file("build/libs")
}


def projectName = 'wms-core'
clean {
    delete 'dist'
    delete 'build'
}


jar {
    //执行打包
    enabled = true

    from sourceSets.main.allJava
    destinationDir file('dist/apps')
    exclude 'static/**','*.yml','*.jar'
    archiveName "${projectName}.jar"

    doLast {
        copy {
            from file('src/main/resources/')
            into 'dist/conf'
            exclude 'buildconf', 'map/**', 'mock','static/**'
            if (project.hasProperty('env')) {
                String env = project.getProperty('env');
                switch(env) {
                    case  ['t', 'test']:
                        exclude 'application_dev.yml','application.yml','application_prod.yml'
                        rename("application_test.yml","application.yml")
                        break
                    case ['d', 'dev']:
                        exclude 'application_test.yml','application.yml','application_prod.yml'
                        rename("application_dev.yml","application.yml")
                        break
                    case ['p', 'prod']:
                        exclude 'application_test.yml','application_dev.yml','application.yml'
                        rename("application_prod.yml","application.yml")
                        break
                }
            }else{ // 默认是生产环境
                exclude 'application_test.yml','application_dev.yml'
                rename("application_prod.yml","application.yml")
            }
        }

        copy {
            from file('src/main/resources/static/disted/')
            into 'dist/static/'
        }


        copy {
            from file('src/main/resources/buildconf')
            into 'dist/conf'
        }

        copy {
            from file('script')
            into 'dist/script'
        }

        copy {
            from file('.').listFiles().findAll{File f -> (f.name.endsWith('.sh'))}
            into 'dist'
        }

        copy {
            from configurations.runtime
            into 'dist/lib'
        }


    }
}
build {
    jar
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}